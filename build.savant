/*
 * Copyright (c) 2018-2020, Inversoft, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

project(group: "com.inversoft.cleanspeak", name: "cleanspeak-containers", version: "3.31.4", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "https://external.svn.fusionauth.io")
  }

  publications {
    docker {
      publication(name: "cleanspeak-webservice-dockerfile", type: "docker", file: "docker/cleanspeak/cleanspeak-webservice/Dockerfile")
      publication(name: "cleanspeak-management-interface-dockerfile", type: "docker", file: "docker/cleanspeak/cleanspeak-management-interface/Dockerfile")
      publication(name: "cleanspeak-docker-compose", type: "yml", file: "docker/cleanspeak/docker-compose.yml")
    }
  }
}

/*
 * Define Plugins
 */
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:1.0.0")

/*
 * Targets
 */

target(name: "clean", description: "Clean project") {
  // No Op
}

target(name: "int", description: "runs an integration build") {
  // No Op
}

target(name: "idea", description: "Releases a local integration build of the project") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project") {
  release.release()
}

target(name: "publish", description: "Releases the Docker images to DockerHub") {
  // Update to the latest ubuntu:focal build
  if (!cleanExecute("docker", "pull", "ubuntu:focal")) {
    fail("Failed to pull the latest Ubuntu image.")
  }

  // Build images
  if (!cleanExecute("docker", "build", "-t", "cleanspeak/cleanspeak-management-interface:${project.version}" as String, "./docker/cleanspeak/cleanspeak-management-interface")) {
    fail("Failed to build Docker image for cleanspeak-management-interface [${project.version}]")
  }

  if (!cleanExecute("docker", "build", "-t", "cleanspeak/cleanspeak-webservice:${project.version}" as String, "./docker/cleanspeak/cleanspeak-webservice")) {
    fail("Failed to build Docker image for cleanspeak-webservice [${project.version}]")
  }

  // Don't build a pre-release latest tag
  if (!project.version.preRelease) {
    if (!cleanExecute("docker", "tag", "cleanspeak/cleanspeak-management-interface:${project.version}" as String, "cleanspeak/cleanspeak-management-interface:latest" as String)) {
      fail("Failed to build Docker image for cleanspeak-management-interface [latest]")
    }
    if (!cleanExecute("docker", "tag", "cleanspeak/cleanspeak-webservice:${project.version}" as String, "cleanspeak/cleanspeak-webservice:latest" as String)) {
      fail("Failed to build Docker image for cleanspeak-webservice [latest]")
    }
  }

  // Push images
  if (!switches.has("dryRun")) {
    if (!cleanExecute("docker", "push", "cleanspeak/cleanspeak-management-interface:${project.version}" as String)) {
      fail("Failed to push Docker image for cleanspeak-management-interface [${project.version}]")
    }
    if (!cleanExecute("docker", "push", "cleanspeak/cleanspeak-webservice:${project.version}" as String)) {
      fail("Failed to push Docker image for cleanspeak-webservice[${project.version}]")
    }


    // Don't push a pre-release latest tag
    if (!project.version.preRelease) {
      if (!cleanExecute("docker", "push", "cleanspeak/cleanspeak-management-interface:latest" as String)) {
        fail("Failed to push Docker image for cleanspeak-management-interface [latest]")
      }
      if (!cleanExecute("docker", "push", "cleanspeak/cleanspeak-webservice:latest" as String)) {
        fail("Failed to push Docker image for cleanspeak-webservice [latest]")
      }
    }
  }
}

boolean cleanExecute(String... args) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

